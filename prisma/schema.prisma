generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                        @id @default(autoincrement())
  email                String                     @unique
  username             String
  passwordHash         String                     @map("password_hash")
  emailVerified        Boolean                    @default(false) @map("email_verified")
  totpKey              Bytes?                     @map("totp_key")
  recoveryCode         Bytes                      @map("recovery_code")
  subscriptions        Subscription?
  api_credits_purchase api_credits_purchase[]     @relation("api_credits_purchaseTouser")
  api_credits_usage    api_credits_usage[]        @relation("api_credits_usageTouser")
  apiKeys              ApiKey[]                   @relation("UserApiKeys")
  calendarAccounts     CalendarAccount[]
  emailVerifications   EmailVerificationRequest[]
  passwordResets       PasswordResetSession[]
  sessions             Session[]
  creditsBalance       ApiKeyCreditsBalance[]
  LearningAccounts     LearningAccount[]

  @@index([email], map: "email_index")
  @@map("user")
}

enum AccountType {
  WEBUNTIS
  MOODLE
}

model LearningAccount {
  id           Int         @id @default(autoincrement())
  userId       Int
  type         AccountType
  username     String
  passwordHash String      @map("password_hash")
  school       String
  baseUrl      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

model ApiKeyCreditsBalance {
  id        String   @id @unique @default(cuid())
  userId    Int      @unique
  credits   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               Int      @unique
  stripeCustomerId     String   @unique
  stripeSubscriptionId String   @unique
  status               String
  priceId              String
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model Session {
  id                String   @id @default(uuid())
  userId            Int      @map("user_id")
  expiresAt         DateTime @map("expires_at")
  twoFactorVerified Boolean  @default(false) @map("two_factor_verified")
  user              User     @relation(fields: [userId], references: [id])

  @@map("session")
}

model EmailVerificationRequest {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("email_verification_request")
}

model PasswordResetSession {
  id                String   @id @default(uuid())
  userId            Int      @map("user_id")
  email             String
  code              String
  expiresAt         DateTime @map("expires_at")
  emailVerified     Boolean  @default(false) @map("email_verified")
  twoFactorVerified Boolean  @default(false) @map("two_factor_verified")
  user              User     @relation(fields: [userId], references: [id])

  @@map("password_reset_session")
}

model ApiKey {
  id                 String               @id @default(uuid())
  key                String               @unique
  unlimited          Boolean
  minInterval        Int                  @default(0)
  ownerId            Int?                 @map("owner_id")
  description        String?
  createdAt          DateTime             @default(now())
  lastRequest        DateTime?
  name               String
  owner              User?                @relation("UserApiKeys", fields: [ownerId], references: [id])
  api_key_permission api_key_permission[] @relation("api_keyToapi_key_permission")
  usageLogs          ApiUsageLog[]

  @@map("api_key")
}

model ApiUsageLog {
  id         String   @id @default(uuid())
  timestamp  DateTime @default(now())
  endpoint   String
  params     Json
  statusCode Int
  ipAddress  String?
  userAgent  String?
  apiKeyId   String?  @map("api_key_id")
  apiKey     ApiKey?  @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)

  @@map("api_usage_log")
}

model TimetableCache {
  id        String   @id @default(uuid())
  username  String
  school    String
  date      String
  data      Json
  expiresAt DateTime

  @@index([username, school, date])
  @@map("timetable_cache")
}

model CalendarAccount {
  id                Int              @id @default(autoincrement())
  userId            Int
  provider          CalendarProvider @default(GOOGLE)
  providerAccountId String
  accessToken       String
  refreshToken      String?
  expiresAt         DateTime?
  scope             String?
  calendarId        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
  @@map("calendar_account")
}

model api_credits_purchase {
  id           String   @id @default(uuid())
  credits      Int
  purchaseDate DateTime @default(now())
  user_id      Int?
  user         User?    @relation("api_credits_purchaseTouser", fields: [user_id], references: [id])
}

model api_credits_usage {
  id         String   @id @default(uuid())
  api_key_id String
  credits    Int
  usageDate  DateTime @default(now())
  user_id    Int?
  user       User?    @relation("api_credits_usageTouser", fields: [user_id], references: [id])
}

model api_key_permission {
  id         String @id
  api_key_id String
  permission String
  api_key    ApiKey @relation("api_keyToapi_key_permission", fields: [api_key_id], references: [id], onDelete: Cascade)
}

enum CalendarProvider {
  GOOGLE
  MICROSOFT
  ICLOUD
}
